Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.



Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.



class Solution {
    public String minWindow(String s, String t) {
        if (s.length() < t.length()) return "";

        Map<Character, Integer> tMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }

        int req = tMap.size();
        int formed = 0;

        Map<Character, Integer> wincount = new HashMap<>();
        int l = 0, r = 0;
        int[] ans = {-1, 0, 0};

        while (r < s.length()) {
            char c = s.charAt(r);
            wincount.put(c, wincount.getOrDefault(c, 0) + 1);

            if (tMap.containsKey(c) && wincount.get(c).intValue() == tMap.get(c).intValue()) {
                formed++;
            }

            // ðŸ”¥ SHRINK the window as much as possible while it's valid
            while (l <= r && formed == req) {
                c = s.charAt(l);

                // Save the smallest window
                if (ans[0] == -1 || r - l + 1 < ans[0]) {
                    ans[0] = r - l + 1;
                    ans[1] = l;
                    ans[2] = r;
                }

                // Remove the leftmost character
                wincount.put(c, wincount.get(c) - 1);
                if (tMap.containsKey(c) && wincount.get(c).intValue() < tMap.get(c).intValue()) {
                    formed--;
                }

                l++;
            }

            r++;
        }

        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}
